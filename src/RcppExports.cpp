// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// cpp_test_nlopt
bool cpp_test_nlopt();
RcppExport SEXP _PLNmodels_cpp_test_nlopt() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_test_nlopt());
    return rcpp_result_gen;
END_RCPP
}
// cpp_optimize_diagonal
Rcpp::List cpp_optimize_diagonal(const Rcpp::List& init_parameters, const arma::mat& Y, const arma::mat& X, const arma::mat& O, const arma::vec& w, const Rcpp::List& configuration);
RcppExport SEXP _PLNmodels_cpp_optimize_diagonal(SEXP init_parametersSEXP, SEXP YSEXP, SEXP XSEXP, SEXP OSEXP, SEXP wSEXP, SEXP configurationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type init_parameters(init_parametersSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type O(OSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type configuration(configurationSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_optimize_diagonal(init_parameters, Y, X, O, w, configuration));
    return rcpp_result_gen;
END_RCPP
}
// cpp_optimize_vestep_diagonal
Rcpp::List cpp_optimize_vestep_diagonal(const Rcpp::List& init_parameters, const arma::mat& Y, const arma::mat& X, const arma::mat& O, const arma::vec& w, const arma::mat& Theta, const arma::mat& Omega, const Rcpp::List& configuration);
RcppExport SEXP _PLNmodels_cpp_optimize_vestep_diagonal(SEXP init_parametersSEXP, SEXP YSEXP, SEXP XSEXP, SEXP OSEXP, SEXP wSEXP, SEXP ThetaSEXP, SEXP OmegaSEXP, SEXP configurationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type init_parameters(init_parametersSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type O(OSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Omega(OmegaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type configuration(configurationSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_optimize_vestep_diagonal(init_parameters, Y, X, O, w, Theta, Omega, configuration));
    return rcpp_result_gen;
END_RCPP
}
// cpp_optimize_full
Rcpp::List cpp_optimize_full(const Rcpp::List& init_parameters, const arma::mat& Y, const arma::mat& X, const arma::mat& O, const arma::vec& w, const Rcpp::List& configuration);
RcppExport SEXP _PLNmodels_cpp_optimize_full(SEXP init_parametersSEXP, SEXP YSEXP, SEXP XSEXP, SEXP OSEXP, SEXP wSEXP, SEXP configurationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type init_parameters(init_parametersSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type O(OSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type configuration(configurationSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_optimize_full(init_parameters, Y, X, O, w, configuration));
    return rcpp_result_gen;
END_RCPP
}
// cpp_optimize_vestep_full
Rcpp::List cpp_optimize_vestep_full(const Rcpp::List& init_parameters, const arma::mat& Y, const arma::mat& X, const arma::mat& O, const arma::vec& w, const arma::mat& Theta, const arma::mat& Omega, const Rcpp::List& configuration);
RcppExport SEXP _PLNmodels_cpp_optimize_vestep_full(SEXP init_parametersSEXP, SEXP YSEXP, SEXP XSEXP, SEXP OSEXP, SEXP wSEXP, SEXP ThetaSEXP, SEXP OmegaSEXP, SEXP configurationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type init_parameters(init_parametersSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type O(OSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Omega(OmegaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type configuration(configurationSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_optimize_vestep_full(init_parameters, Y, X, O, w, Theta, Omega, configuration));
    return rcpp_result_gen;
END_RCPP
}
// cpp_optimize_genetic_modeling
Rcpp::List cpp_optimize_genetic_modeling(const Rcpp::List& init_parameters, const arma::mat& Y, const arma::mat& X, const arma::mat& O, const arma::vec& w, const arma::mat& C, const Rcpp::List& configuration);
RcppExport SEXP _PLNmodels_cpp_optimize_genetic_modeling(SEXP init_parametersSEXP, SEXP YSEXP, SEXP XSEXP, SEXP OSEXP, SEXP wSEXP, SEXP CSEXP, SEXP configurationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type init_parameters(init_parametersSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type O(OSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type C(CSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type configuration(configurationSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_optimize_genetic_modeling(init_parameters, Y, X, O, w, C, configuration));
    return rcpp_result_gen;
END_RCPP
}
// cpp_optimize_pln_vloglik
arma::vec cpp_optimize_pln_vloglik(const arma::mat& Y, const arma::mat& X, const arma::mat& O, const arma::mat& Omega, const arma::mat& Theta, const arma::mat& M, const arma::mat& S);
RcppExport SEXP _PLNmodels_cpp_optimize_pln_vloglik(SEXP YSEXP, SEXP XSEXP, SEXP OSEXP, SEXP OmegaSEXP, SEXP ThetaSEXP, SEXP MSEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type O(OSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Omega(OmegaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_optimize_pln_vloglik(Y, X, O, Omega, Theta, M, S));
    return rcpp_result_gen;
END_RCPP
}
// cpp_optimize_pln_Omega_full
arma::mat cpp_optimize_pln_Omega_full(const arma::mat& M, const arma::mat& X, const arma::mat& Theta, const arma::mat& S);
RcppExport SEXP _PLNmodels_cpp_optimize_pln_Omega_full(SEXP MSEXP, SEXP XSEXP, SEXP ThetaSEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_optimize_pln_Omega_full(M, X, Theta, S));
    return rcpp_result_gen;
END_RCPP
}
// cpp_optimize_pln_Omega_spherical
arma::mat cpp_optimize_pln_Omega_spherical(const arma::mat& M, const arma::mat& X, const arma::mat& Theta, const arma::mat& S);
RcppExport SEXP _PLNmodels_cpp_optimize_pln_Omega_spherical(SEXP MSEXP, SEXP XSEXP, SEXP ThetaSEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_optimize_pln_Omega_spherical(M, X, Theta, S));
    return rcpp_result_gen;
END_RCPP
}
// cpp_optimize_pln_Omega_diagonal
arma::mat cpp_optimize_pln_Omega_diagonal(const arma::mat& M, const arma::mat& X, const arma::mat& Theta, const arma::mat& S);
RcppExport SEXP _PLNmodels_cpp_optimize_pln_Omega_diagonal(SEXP MSEXP, SEXP XSEXP, SEXP ThetaSEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_optimize_pln_Omega_diagonal(M, X, Theta, S));
    return rcpp_result_gen;
END_RCPP
}
// cpp_optimize_pln_Theta
arma::mat cpp_optimize_pln_Theta(const arma::mat& M, const arma::mat& X);
RcppExport SEXP _PLNmodels_cpp_optimize_pln_Theta(SEXP MSEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_optimize_pln_Theta(M, X));
    return rcpp_result_gen;
END_RCPP
}
// cpp_optimize_pln_M
Rcpp::List cpp_optimize_pln_M(const arma::mat& init_M, const arma::mat& Y, const arma::mat& X, const arma::mat& O, const arma::mat& S, const arma::mat& Theta, const arma::mat& Omega, const Rcpp::List& configuration);
RcppExport SEXP _PLNmodels_cpp_optimize_pln_M(SEXP init_MSEXP, SEXP YSEXP, SEXP XSEXP, SEXP OSEXP, SEXP SSEXP, SEXP ThetaSEXP, SEXP OmegaSEXP, SEXP configurationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type init_M(init_MSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type O(OSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Omega(OmegaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type configuration(configurationSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_optimize_pln_M(init_M, Y, X, O, S, Theta, Omega, configuration));
    return rcpp_result_gen;
END_RCPP
}
// cpp_optimize_pln_S
Rcpp::List cpp_optimize_pln_S(const arma::mat& init_S, const arma::mat& O, const arma::mat& M, const arma::mat& Theta, const arma::vec& diag_Omega, const Rcpp::List& configuration);
RcppExport SEXP _PLNmodels_cpp_optimize_pln_S(SEXP init_SSEXP, SEXP OSEXP, SEXP MSEXP, SEXP ThetaSEXP, SEXP diag_OmegaSEXP, SEXP configurationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type init_S(init_SSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type O(OSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type diag_Omega(diag_OmegaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type configuration(configurationSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_optimize_pln_S(init_S, O, M, Theta, diag_Omega, configuration));
    return rcpp_result_gen;
END_RCPP
}
// cpp_optimize_pln_VE
Rcpp::List cpp_optimize_pln_VE(const arma::mat& init_M, const arma::mat& init_S, const arma::mat& Y, const arma::mat& X, const arma::mat& O, const arma::mat& Theta, const arma::mat& Omega, const Rcpp::List& configuration);
RcppExport SEXP _PLNmodels_cpp_optimize_pln_VE(SEXP init_MSEXP, SEXP init_SSEXP, SEXP YSEXP, SEXP XSEXP, SEXP OSEXP, SEXP ThetaSEXP, SEXP OmegaSEXP, SEXP configurationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type init_M(init_MSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type init_S(init_SSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type O(OSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Omega(OmegaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type configuration(configurationSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_optimize_pln_VE(init_M, init_S, Y, X, O, Theta, Omega, configuration));
    return rcpp_result_gen;
END_RCPP
}
// cpp_optimize_rank
Rcpp::List cpp_optimize_rank(const Rcpp::List& init_parameters, const arma::mat& Y, const arma::mat& X, const arma::mat& O, const arma::vec& w, const Rcpp::List& configuration);
RcppExport SEXP _PLNmodels_cpp_optimize_rank(SEXP init_parametersSEXP, SEXP YSEXP, SEXP XSEXP, SEXP OSEXP, SEXP wSEXP, SEXP configurationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type init_parameters(init_parametersSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type O(OSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type configuration(configurationSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_optimize_rank(init_parameters, Y, X, O, w, configuration));
    return rcpp_result_gen;
END_RCPP
}
// cpp_optimize_vestep_rank
Rcpp::List cpp_optimize_vestep_rank(const Rcpp::List& init_parameters, const arma::mat& Y, const arma::mat& X, const arma::mat& O, const arma::vec& w, const arma::mat& Theta, const arma::mat& B, const Rcpp::List& configuration);
RcppExport SEXP _PLNmodels_cpp_optimize_vestep_rank(SEXP init_parametersSEXP, SEXP YSEXP, SEXP XSEXP, SEXP OSEXP, SEXP wSEXP, SEXP ThetaSEXP, SEXP BSEXP, SEXP configurationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type init_parameters(init_parametersSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type O(OSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type configuration(configurationSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_optimize_vestep_rank(init_parameters, Y, X, O, w, Theta, B, configuration));
    return rcpp_result_gen;
END_RCPP
}
// cpp_optimize_sparse
Rcpp::List cpp_optimize_sparse(const Rcpp::List& init_parameters, const arma::mat& Y, const arma::mat& X, const arma::mat& O, const arma::vec& w, const arma::mat& Omega, const Rcpp::List& configuration);
RcppExport SEXP _PLNmodels_cpp_optimize_sparse(SEXP init_parametersSEXP, SEXP YSEXP, SEXP XSEXP, SEXP OSEXP, SEXP wSEXP, SEXP OmegaSEXP, SEXP configurationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type init_parameters(init_parametersSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type O(OSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Omega(OmegaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type configuration(configurationSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_optimize_sparse(init_parameters, Y, X, O, w, Omega, configuration));
    return rcpp_result_gen;
END_RCPP
}
// cpp_optimize_spherical
Rcpp::List cpp_optimize_spherical(const Rcpp::List& init_parameters, const arma::mat& Y, const arma::mat& X, const arma::mat& O, const arma::vec& w, const Rcpp::List& configuration);
RcppExport SEXP _PLNmodels_cpp_optimize_spherical(SEXP init_parametersSEXP, SEXP YSEXP, SEXP XSEXP, SEXP OSEXP, SEXP wSEXP, SEXP configurationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type init_parameters(init_parametersSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type O(OSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type configuration(configurationSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_optimize_spherical(init_parameters, Y, X, O, w, configuration));
    return rcpp_result_gen;
END_RCPP
}
// cpp_optimize_vestep_spherical
Rcpp::List cpp_optimize_vestep_spherical(const Rcpp::List& init_parameters, const arma::mat& Y, const arma::mat& X, const arma::mat& O, const arma::vec& w, const arma::mat& Theta, const arma::mat& Omega, const Rcpp::List& configuration);
RcppExport SEXP _PLNmodels_cpp_optimize_vestep_spherical(SEXP init_parametersSEXP, SEXP YSEXP, SEXP XSEXP, SEXP OSEXP, SEXP wSEXP, SEXP ThetaSEXP, SEXP OmegaSEXP, SEXP configurationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type init_parameters(init_parametersSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type O(OSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Omega(OmegaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type configuration(configurationSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_optimize_vestep_spherical(init_parameters, Y, X, O, w, Theta, Omega, configuration));
    return rcpp_result_gen;
END_RCPP
}
// cpp_optimize_zi_vloglik
arma::vec cpp_optimize_zi_vloglik(const arma::mat& Y, const arma::mat& X, const arma::mat& O, const arma::mat& Theta0, const arma::mat& Omega, const arma::mat& Theta, const arma::mat& Pi, const arma::mat& M, const arma::mat& S);
RcppExport SEXP _PLNmodels_cpp_optimize_zi_vloglik(SEXP YSEXP, SEXP XSEXP, SEXP OSEXP, SEXP Theta0SEXP, SEXP OmegaSEXP, SEXP ThetaSEXP, SEXP PiSEXP, SEXP MSEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type O(OSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Theta0(Theta0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Omega(OmegaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Pi(PiSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_optimize_zi_vloglik(Y, X, O, Theta0, Omega, Theta, Pi, M, S));
    return rcpp_result_gen;
END_RCPP
}
// cpp_optimize_zi_Omega_full
arma::mat cpp_optimize_zi_Omega_full(const arma::mat& M, const arma::mat& X, const arma::mat& Theta, const arma::mat& S);
RcppExport SEXP _PLNmodels_cpp_optimize_zi_Omega_full(SEXP MSEXP, SEXP XSEXP, SEXP ThetaSEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_optimize_zi_Omega_full(M, X, Theta, S));
    return rcpp_result_gen;
END_RCPP
}
// cpp_optimize_zi_Omega_spherical
arma::mat cpp_optimize_zi_Omega_spherical(const arma::mat& M, const arma::mat& X, const arma::mat& Theta, const arma::mat& S);
RcppExport SEXP _PLNmodels_cpp_optimize_zi_Omega_spherical(SEXP MSEXP, SEXP XSEXP, SEXP ThetaSEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_optimize_zi_Omega_spherical(M, X, Theta, S));
    return rcpp_result_gen;
END_RCPP
}
// cpp_optimize_zi_Omega_diagonal
arma::mat cpp_optimize_zi_Omega_diagonal(const arma::mat& M, const arma::mat& X, const arma::mat& Theta, const arma::mat& S);
RcppExport SEXP _PLNmodels_cpp_optimize_zi_Omega_diagonal(SEXP MSEXP, SEXP XSEXP, SEXP ThetaSEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_optimize_zi_Omega_diagonal(M, X, Theta, S));
    return rcpp_result_gen;
END_RCPP
}
// cpp_optimize_zi_Theta
arma::mat cpp_optimize_zi_Theta(const arma::mat& M, const arma::mat& X);
RcppExport SEXP _PLNmodels_cpp_optimize_zi_Theta(SEXP MSEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_optimize_zi_Theta(M, X));
    return rcpp_result_gen;
END_RCPP
}
// cpp_optimize_zi_Theta0
Rcpp::List cpp_optimize_zi_Theta0(const arma::mat& init_Theta0, const arma::mat& X, const arma::mat& Pi, const Rcpp::List& configuration);
RcppExport SEXP _PLNmodels_cpp_optimize_zi_Theta0(SEXP init_Theta0SEXP, SEXP XSEXP, SEXP PiSEXP, SEXP configurationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type init_Theta0(init_Theta0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Pi(PiSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type configuration(configurationSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_optimize_zi_Theta0(init_Theta0, X, Pi, configuration));
    return rcpp_result_gen;
END_RCPP
}
// cpp_optimize_zi_Pi
arma::mat cpp_optimize_zi_Pi(const arma::mat& Y, const arma::mat& X, const arma::mat& O, const arma::mat& M, const arma::mat& S, const arma::mat& Theta0);
RcppExport SEXP _PLNmodels_cpp_optimize_zi_Pi(SEXP YSEXP, SEXP XSEXP, SEXP OSEXP, SEXP MSEXP, SEXP SSEXP, SEXP Theta0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type O(OSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Theta0(Theta0SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_optimize_zi_Pi(Y, X, O, M, S, Theta0));
    return rcpp_result_gen;
END_RCPP
}
// cpp_optimize_zi_M
Rcpp::List cpp_optimize_zi_M(const arma::mat& init_M, const arma::mat& Y, const arma::mat& X, const arma::mat& O, const arma::mat& Pi, const arma::mat& S, const arma::mat& Theta, const arma::mat& Omega, const Rcpp::List& configuration);
RcppExport SEXP _PLNmodels_cpp_optimize_zi_M(SEXP init_MSEXP, SEXP YSEXP, SEXP XSEXP, SEXP OSEXP, SEXP PiSEXP, SEXP SSEXP, SEXP ThetaSEXP, SEXP OmegaSEXP, SEXP configurationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type init_M(init_MSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type O(OSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Pi(PiSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Omega(OmegaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type configuration(configurationSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_optimize_zi_M(init_M, Y, X, O, Pi, S, Theta, Omega, configuration));
    return rcpp_result_gen;
END_RCPP
}
// cpp_optimize_zi_S
Rcpp::List cpp_optimize_zi_S(const arma::mat& init_S, const arma::mat& O, const arma::mat& M, const arma::mat& Pi, const arma::mat& Theta, const arma::vec& diag_Omega, const Rcpp::List& configuration);
RcppExport SEXP _PLNmodels_cpp_optimize_zi_S(SEXP init_SSEXP, SEXP OSEXP, SEXP MSEXP, SEXP PiSEXP, SEXP ThetaSEXP, SEXP diag_OmegaSEXP, SEXP configurationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type init_S(init_SSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type O(OSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Pi(PiSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type diag_Omega(diag_OmegaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type configuration(configurationSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_optimize_zi_S(init_S, O, M, Pi, Theta, diag_Omega, configuration));
    return rcpp_result_gen;
END_RCPP
}
// cpp_test_packing
bool cpp_test_packing();
RcppExport SEXP _PLNmodels_cpp_test_packing() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_test_packing());
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_PLNmodels_cpp_test_nlopt", (DL_FUNC) &_PLNmodels_cpp_test_nlopt, 0},
    {"_PLNmodels_cpp_optimize_diagonal", (DL_FUNC) &_PLNmodels_cpp_optimize_diagonal, 6},
    {"_PLNmodels_cpp_optimize_vestep_diagonal", (DL_FUNC) &_PLNmodels_cpp_optimize_vestep_diagonal, 8},
    {"_PLNmodels_cpp_optimize_full", (DL_FUNC) &_PLNmodels_cpp_optimize_full, 6},
    {"_PLNmodels_cpp_optimize_vestep_full", (DL_FUNC) &_PLNmodels_cpp_optimize_vestep_full, 8},
    {"_PLNmodels_cpp_optimize_genetic_modeling", (DL_FUNC) &_PLNmodels_cpp_optimize_genetic_modeling, 7},
    {"_PLNmodels_cpp_optimize_pln_vloglik", (DL_FUNC) &_PLNmodels_cpp_optimize_pln_vloglik, 7},
    {"_PLNmodels_cpp_optimize_pln_Omega_full", (DL_FUNC) &_PLNmodels_cpp_optimize_pln_Omega_full, 4},
    {"_PLNmodels_cpp_optimize_pln_Omega_spherical", (DL_FUNC) &_PLNmodels_cpp_optimize_pln_Omega_spherical, 4},
    {"_PLNmodels_cpp_optimize_pln_Omega_diagonal", (DL_FUNC) &_PLNmodels_cpp_optimize_pln_Omega_diagonal, 4},
    {"_PLNmodels_cpp_optimize_pln_Theta", (DL_FUNC) &_PLNmodels_cpp_optimize_pln_Theta, 2},
    {"_PLNmodels_cpp_optimize_pln_M", (DL_FUNC) &_PLNmodels_cpp_optimize_pln_M, 8},
    {"_PLNmodels_cpp_optimize_pln_S", (DL_FUNC) &_PLNmodels_cpp_optimize_pln_S, 6},
    {"_PLNmodels_cpp_optimize_pln_VE", (DL_FUNC) &_PLNmodels_cpp_optimize_pln_VE, 8},
    {"_PLNmodels_cpp_optimize_rank", (DL_FUNC) &_PLNmodels_cpp_optimize_rank, 6},
    {"_PLNmodels_cpp_optimize_vestep_rank", (DL_FUNC) &_PLNmodels_cpp_optimize_vestep_rank, 8},
    {"_PLNmodels_cpp_optimize_sparse", (DL_FUNC) &_PLNmodels_cpp_optimize_sparse, 7},
    {"_PLNmodels_cpp_optimize_spherical", (DL_FUNC) &_PLNmodels_cpp_optimize_spherical, 6},
    {"_PLNmodels_cpp_optimize_vestep_spherical", (DL_FUNC) &_PLNmodels_cpp_optimize_vestep_spherical, 8},
    {"_PLNmodels_cpp_optimize_zi_vloglik", (DL_FUNC) &_PLNmodels_cpp_optimize_zi_vloglik, 9},
    {"_PLNmodels_cpp_optimize_zi_Omega_full", (DL_FUNC) &_PLNmodels_cpp_optimize_zi_Omega_full, 4},
    {"_PLNmodels_cpp_optimize_zi_Omega_spherical", (DL_FUNC) &_PLNmodels_cpp_optimize_zi_Omega_spherical, 4},
    {"_PLNmodels_cpp_optimize_zi_Omega_diagonal", (DL_FUNC) &_PLNmodels_cpp_optimize_zi_Omega_diagonal, 4},
    {"_PLNmodels_cpp_optimize_zi_Theta", (DL_FUNC) &_PLNmodels_cpp_optimize_zi_Theta, 2},
    {"_PLNmodels_cpp_optimize_zi_Theta0", (DL_FUNC) &_PLNmodels_cpp_optimize_zi_Theta0, 4},
    {"_PLNmodels_cpp_optimize_zi_Pi", (DL_FUNC) &_PLNmodels_cpp_optimize_zi_Pi, 6},
    {"_PLNmodels_cpp_optimize_zi_M", (DL_FUNC) &_PLNmodels_cpp_optimize_zi_M, 9},
    {"_PLNmodels_cpp_optimize_zi_S", (DL_FUNC) &_PLNmodels_cpp_optimize_zi_S, 7},
    {"_PLNmodels_cpp_test_packing", (DL_FUNC) &_PLNmodels_cpp_test_packing, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_PLNmodels(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
